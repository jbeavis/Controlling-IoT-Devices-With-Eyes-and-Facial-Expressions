# Boiler plate code partially generated by ChatGPT:
# Prompt:
#using the mixer part of pygame, can you please create a command line app which allows me to play music from a directory of mp3s, looping through the songs? i'd like the ability to pause and resume playback, and skip forwards and backwards with tracks.

import pygame
import os
import time


# Initialize pygame
pygame.init()
pygame.mixer.init()

class MusicPlayer:
    def __init__(self, music_dir):
        self.music_dir = music_dir
        self.playlist = [f for f in os.listdir(music_dir) if f.endswith(".mp3")]
        self.current_track_index = 0
        self.paused = False
        if not self.playlist:
            print("No MP3 files found in the directory.")
            exit()
        pygame.mixer.music.set_endevent(pygame.USEREVENT)  # Set event for track end
        self.load_track()
    
    def load_track(self):
        track_path = os.path.join(self.music_dir, self.playlist[self.current_track_index])
        pygame.mixer.music.load(track_path)
        print(f"Loaded: {self.playlist[self.current_track_index]}")
    
    def play(self):
        pygame.mixer.music.play()
        self.paused = False
        print("Playing...")
    
    def pause(self):
        if not self.paused:
            pygame.mixer.music.pause()
            self.paused = True
            print("Paused")
    
    def resume(self):
        if self.paused:
            pygame.mixer.music.unpause()
            self.paused = False
            print("Resumed")
    
    def next_track(self):
        self.current_track_index = (self.current_track_index + 1) % len(self.playlist)
        self.load_track()
        self.play()
    
    def prev_track(self):
        self.current_track_index = (self.current_track_index - 1) % len(self.playlist)
        self.load_track()
        self.play()
    
    def run(self):
        self.play()
        while True:
            for event in pygame.event.get():
                if event.type == pygame.USEREVENT:  # Detect track end event
                    self.next_track()
            
            command = input("Commands: [p]ause, [r]esume, [n]ext, [b]ack, [q]uit: ")
            if command == 'p':
                self.pause()
            elif command == 'r':
                self.resume()
            elif command == 'n':
                self.next_track()
            elif command == 'b':
                self.prev_track()
            elif command == 'q':
                pygame.mixer.music.stop()
                print("Exiting...")
                break
            time.sleep(0.1)  # Prevent CPU overuse

if __name__ == "__main__":
    music_directory = "Music/Happy"
    if not os.path.exists(music_directory):
        print("Invalid directory.")
    else:
        player = MusicPlayer(music_directory)
        player.run()
